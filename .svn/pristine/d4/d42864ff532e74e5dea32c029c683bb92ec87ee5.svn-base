import React from 'react';
import { Table, notification } from 'antd';
import moment from 'moment';
import qs from 'qs';
import API from '../../contants/ApiRoot';
import {TASK_GET, TASK_END_POST} from '../../contants/actionTypes/task';

import axios from 'axios';

const openNotification = (type, message) => {
	notification[type]({
		message,
	});
};

class TaskTableList extends React.Component {
	state = {
		data: []
	};
	componentDidMount() {
		const { getTaskList } = this.props.actions;
		axios.get(API[TASK_GET]).then(function(response) {
			console.log(response);
			getTaskList(response.data.data);
		});
	}

	handleClickModify = (e, task_id) => {
		e.preventDefault();
		this.props.handleOpenModal();
		this.props.actions.changeTaskModifyId({task_id});
	}

	handleFinishTask = (e, record) => {
		e.preventDefault();
		const { finishTask } = this.props.actions;
		const time = Date.now();
		const params = {
			task_id: record.task_id,
			over_time: moment(time).format('X'),
		}
		axios({
			method: 'post',
			url: API[TASK_END_POST],
			// url: '/api/task/task/task-over.json',
			data: qs.stringify(params),
			// data: params,
		}).then(function(data) {
				if(data.data.status.toString() === '1') {
					openNotification('success', `标记 ${record.task_name} 为完成成功`);
					// alert('标记为完成成功');
					finishTask({
						task_id: params.task_id,
						over_time: moment(time).format('YYYY-MM-DD HH:mm:ss'),
					});
				} else {
					openNotification('error', `标记 ${record.task_name} 为完成失败, ${data.data.msg}`);
				}
			}
		)
	}

	render() {
		const { handleClickModify } = this.props;
		const columns = [
			{
				title: '任务名称',
				dataIndex: 'task_name',
				key: 'task_name',
			},
			{
				title: '难度',
				dataIndex: 'task_level_name',
				key: 'task_level_name',
			},
			{
				title: '前端',
				dataIndex: 'front_user_name',
				key: 'front_user_name',
			},
			{
				title: '后端',
				dataIndex: 'back_user_name',
				key: 'back_user_name',
			},
			{
				title: '开始时间（前端）',
				dataIndex: 'front_start_time',
				key: 'front_start_time',
			},
			{
				title: '预计完成时间（前端）',
				dataIndex: 'front_end_time',
				key: 'front_end_time',
			},
			{
				title: '开始时间（后端）',
				dataIndex: 'back_start_time',
				key: 'back_start_time',
			},
			{
				title: '预计完成时间（后端）',
				dataIndex: 'back_end_time',
				key: 'back_end_time',
			},
			{
				title: '实际完成时间',
				dataIndex: 'over_time',
				key: 'over_time',
			},
			{
				title: '操作',
				key: 'action',
				render: (text, record) => (
					<span>
						<a href="#" onClick={(e) => this.handleClickModify(e, record.task_id)} >编辑</a>
						<span className="ant-divider" />
						<a href="#" onClick={(e) => this.handleFinishTask(e, record)}>标记为完成</a>
					</span>
				)
			}
		];
		return <Table rowKey="task_id" columns={columns} dataSource={this.props.data} />;
	}
}

export default TaskTableList;
