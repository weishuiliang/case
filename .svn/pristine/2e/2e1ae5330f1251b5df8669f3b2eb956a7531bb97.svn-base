import React from 'react';
import { Table, notification, Popconfirm } from 'antd';
import moment from 'moment';
import qs from 'qs';
import axios from 'axios';

import API from '../../contants/ApiRoot';
import {TASK_GET, TASK_END_POST, TASK_DEL_POST} from '../../contants/actionTypes/task';

import { openNotification } from '../../utils/utils';

// const openNotification = (type, message) => {
// 	notification[type]({
// 		message,
// 	});
// };

class TaskTableList extends React.Component {
	state = {
		loading: true,
		loadingTip: '正在获取数据...',
		pagination: {},
	};
	componentDidMount() {
		this.fetchData();
		// const { getTaskList } = this.props.actions;
		// axios.get(API[TASK_GET]).then(response => {
		// 	console.log(response);
		// 	getTaskList(response.data.data.list);
		// 	this.setState({
		// 		loading: false,
		// 	});
		// });
	}

	fetchData = (params = {}) => {
		const { getTaskList } = this.props.actions;
		this.setState({
			loading: true,
			loadingTip: '正在获取数据...'
		});
		axios({
			method: 'GET',
			url: API[TASK_GET],
			params
		}).then(response => {
			console.log(response);
			getTaskList(response.data.data.list);
			this.setState({
				pagination: {
					current: Number(response.data.data.currentPage),
					total: Number(response.data.data.totalCount),
				},
				loading: false,
			});
		});
	}

	handlePageChange = (pagination) => {
		const pager = {...this.state.pagination};
		pager.current = pagination.current;
		this.setState({
			pagination: pager,
		});
		this.fetchData({page: pager.current});
	};

	handleClickModify = (e, task_id) => {
		e.preventDefault();
		this.props.handleOpenModal();
		this.props.actions.changeTaskModifyId({task_id});
	}

	handleFinishTask = (e, record) => {
		e.preventDefault();
		this.setState({
			loading: true,
			loadingTip: '正在将任务标记为完成...',
		});

		const { finishTask } = this.props.actions;
		const time = Date.now();
		const params = {
			task_id: record.task_id,
			over_time: moment(time).format('X'),
		}
		axios({
			method: 'post',
			url: API[TASK_END_POST],
			// url: '/api/task/task/task-over.json',
			data: qs.stringify(params),
			// data: params,
		}).then(data => {
				if(data.data.status.toString() === '1') {
					openNotification('success', `标记 ${record.task_name} 为完成成功`);
					// alert('标记为完成成功');
					finishTask({
						task_id: params.task_id,
						over_time: moment(time).format('YYYY-MM-DD HH:mm:ss'),
					});
				} else {
					openNotification('error', `标记 ${record.task_name} 为完成失败, ${data.data.msg}`);
				}
				this.setState({ loading: false });
			}
		)
	}

	handleDeleteTask = (e, record) => {
		e.preventDefault();
		this.setState({
			loading: true,
			loadingTip: '正在删除任务...',
		});

		const { deleteTask } = this.props.actions;

		const { task_id, task_name }= record;
    axios.post(
			API[TASK_DEL_POST],
			qs.stringify({task_id})
		).then(response => {
			if (response.data.status.toString() === '1') {
				console.log('删除成功');
				deleteTask(task_id);
				openNotification('success', `删除 ${task_name} 成功`);
				this.fetchData({page: this.state.pagination.current}); // 删除成功后重新获取数据
			} else {
				// alert('更新失败');
				openNotification('error', `删除 ${task_name} 失败, ${response.data.msg}`);
				this.setState({ loading: false });
			}
		})
  }

	timeSort = (a, b) => {

	}

	render() {
		const { handleClickModify } = this.props;
		const columns = [
			{
				title: '任务名称',
				dataIndex: 'task_name',
				key: 'task_name',
			},
			{
				title: '难度',
				dataIndex: 'task_level_name',
				key: 'task_level_name',
				sorter: (a, b) => a.task_level - b.task_level,
			},
			{
				title: '前端',
				dataIndex: 'front_user_name',
				key: 'front_user_name',
			},
			{
				title: '后端',
				dataIndex: 'back_user_name',
				key: 'back_user_name',
			},
			{
				title: '开始时间（前端）',
				dataIndex: 'front_start_time',
				key: 'front_start_time',
				sorter: (a, b) => {
					const startTimeA = a.front_start_time || 0;
					const startTimeB = b.front_start_time || 0;
					return moment(startTimeA).format('X') - moment(startTimeB).format('X')
				},
			},
			{
				title: '预计完成时间（前端）',
				dataIndex: 'front_end_time',
				key: 'front_end_time',
				sorter: (a, b) => {
					const startTimeA = a.front_end_time || 0;
					const startTimeB = b.front_end_time || 0;
					return moment(startTimeA).format('X') - moment(startTimeB).format('X')
				},
			},
			{
				title: '开始时间（后端）',
				dataIndex: 'back_start_time',
				key: 'back_start_time',
				sorter: (a, b) => {
					const startTimeA = a.back_start_time || 0;
					const startTimeB = b.back_start_time || 0;
					return moment(startTimeA).format('X') - moment(startTimeB).format('X')
				},
			},
			{
				title: '预计完成时间（后端）',
				dataIndex: 'back_end_time',
				key: 'back_end_time',
				sorter: (a, b) => {
					const startTimeA = a.back_end_time || 0;
					const startTimeB = b.back_end_time || 0;
					return moment(startTimeA).format('X') - moment(startTimeB).format('X')
				},
			},
			{
				title: '实际完成时间',
				dataIndex: 'over_time',
				key: 'over_time',
				sorter: (a, b) => {
					const startTimeA = a.over_time || 0;
					const startTimeB = b.over_time || 0;
					return moment(startTimeA).format('X') - moment(startTimeB).format('X')
				},
			},
			{
				title: '操作',
				key: 'action',
				render: (text, record) => (
					<span>
						<a href="#" onClick={(e) => this.handleClickModify(e, record.task_id)} >编辑</a>
						<span className="ant-divider" />
						<Popconfirm
							title={`确定“${record.task_name}”完成了么？`}
							onConfirm={(e) => this.handleFinishTask(e, record)}
							okText="Yes"
							cancelText="No"
						>
							<a href="#">完成</a>
						</Popconfirm>
						<span className="ant-divider" />
						<Popconfirm
							title={`确定要删除任务"${record.task_name}"？`}
							onConfirm={(e) => this.handleDeleteTask(e, record)}
							okText="Yes"
							cancelText="No"
						>
							<a href="#">删除</a>
						</Popconfirm>
					</span>
				)
			}
		];
		return (
			<Table
				loading={{
					spinning: this.state.loading,
					tip: this.state.loadingTip,
				}}
				rowKey="task_id"
				columns={columns}
				dataSource={this.props.data}
				pagination={this.state.pagination}
				onChange={this.handlePageChange}
			/>
		);
	}
}

export default TaskTableList;
