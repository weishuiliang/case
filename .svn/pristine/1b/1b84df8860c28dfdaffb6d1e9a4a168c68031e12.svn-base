/**
 * 新增部门
 */
import React, { Component } from 'react';
import Qs from 'qs';
import { Modal, Button, Form, Icon, Input, message, Select } from 'antd'
import axios from 'axios';

import * as types from '../../../contants/actionTypes/organize';
import API from '../../../contants/ApiRoot';

const FormItem = Form.Item;
const Option = Select.Option;
const formItemLayout = {
	labelCol: {
		xs: { span: 24 },
		sm: { span: 6 },
	},
	wrapperCol: {
		xs: { span: 24 },
		sm: { span: 14 },
	},
};

class AddPerson extends Component {
	constructor(props) {
		super(props);
		this.state = {
			loading: false,
			selectList: []
		};
		this.handleOk = this.handleOk.bind(this);
		this.handleSubmit = this.handleSubmit.bind(this);
	}

	componentDidMount() {
		this.fetchSelectList();
	}

	/**
	 * 添加/修改
	 * @param values
	 */
	handleOk(values) {
		const { actions, onHideModal, groupInfo, type } = this.props;
		this.setState({ loading: true });
		axios({
			method: 'post',
			url: type === 'new' ? API[types.ORGANIZE_PERSON_ADD_POST] : API[types.ORGANIZE_PERSON_EDIT_POST],
			data: {
				user_id: groupInfo.user_id,
				name: values.name || 0,
				account: values.account || 0,
				group_id: values.groupID || 0
			},
			transformRequest: [function (data, headers) {
				data = Qs.stringify(data);
				return data;
			}]
		})
		.then((response) => {
			if (response.statusText === 'OK') {
				if (response.data.status == 1) {
					this.setState({ loading: false });
					if (type === 'new') {
						actions.addPerson(response.data.data);
					} else {
						actions.editPerson(response.data.data);
					}
					onHideModal && onHideModal();
				} else {
					message.error(response.data.msg);
					this.setState({ loading: false });
				}
			}
		})
		.catch((error) => {
			console.log(error);
			this.setState({ loading: false });
		});
	}

	/**
	 * 请求部门列表
	 */
	fetchSelectList() {
		axios.get(API[types.ORGANIZE_GROUP_LIST_GET], {})
		.then((response) => {
			if (response.statusText === 'OK') {
				if (response.data.status == 1) {
					this.setState({selectList: response.data.data})
				} else {
					console.log(response.data.msg);
					message.error(response.data.msg);
				}
			}
		})
		.catch((error) => {
			console.log(error);
		});
	}

	handleSubmit(e) {
		e.preventDefault();
		this.props.form.validateFields((err, values) => {
			if (!err) {
				console.log('Received values of form: ', values);
				this.handleOk(values);
				this.props.form.setFieldsValue({
					account: '',
					name: '',
					groupID: ''
				})
			}
		});
	}

	render() {
		const { loading, selectList } = this.state;
		const { groupInfo, visible, type, onHideModal } = this.props;
		const { getFieldDecorator } = this.props.form;

		return (
			<Modal
				visible={visible}
				title="添加人员"
				onOk={this.handleOk}
				onCancel={onHideModal}
				footer={null}
			>
				<Form onSubmit={this.handleSubmit} className="login-form">
					<FormItem
						{...formItemLayout}
						label="账号"
					>
						{getFieldDecorator('account', {
							initialValue: `${groupInfo.account || ''}`,
							rules: [{ required: true, message: '请输入账号' }],
						})(
							<Input prefix={<Icon type="user" style={{ fontSize: 13 }} />} placeholder="请输入账号" />
						)}
					</FormItem>
					<FormItem
						{...formItemLayout}
						label="姓名"
					>
						{getFieldDecorator('name', {
							initialValue: `${groupInfo.name || ''}`,
							rules: [{required: true, message: '请输入姓名' }],
						})(
							<Input prefix={<Icon type="user" style={{ fontSize: 13 }} />} placeholder="请输入姓名" />
						)}
					</FormItem>
					<FormItem
						{...formItemLayout}
						label="职位"
					>
						{getFieldDecorator('role', {
							initialValue: `${groupInfo.name || ''}`,
							rules: [{required: true, message: '请输入职位' }],
						})(
							<Input prefix={<Icon type="user" style={{ fontSize: 13 }} />} placeholder="请输入职位" />
						)}
					</FormItem>
					<FormItem
						{...formItemLayout}
						label="所属部门"
					>
						{getFieldDecorator('groupID', {
							initialValue: `${groupInfo.groupID || ''}`,
							rules: [{required: true, message: '请选择部门' }],
						})(
							<Select
								placeholder={'请选择部门'}
							>
								{
									selectList.map((item, index) => {
										return (
											<Option key={item.group_id + ''} value={item.group_id + ''}>{item.group_name}</Option>
										)
									})
								}
							</Select>
						)}
					</FormItem>
					<FormItem>
						<div className="g-flex g-jc-end" style={{marginBottom: '-20px'}}>
							<Button key="back" size="large" onClick={onHideModal}>取消</Button>,
							<Button key="submit" type="primary" size="large" loading={loading} htmlType="submit">
								{type === 'edit' ? '修改' : '添加'}
							</Button>
						</div>
					</FormItem>
				</Form>
			</Modal>
		);
	}
}

export default Form.create()(AddPerson)
